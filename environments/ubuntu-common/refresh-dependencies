#!/usr/bin/env bash
set -o nounset -o pipefail -o errexit
IFS=$'\t\n' # For predictability
rc=0

# TASK [Define functions]

print_usage() {
  echo '
usage: refresh-dependencies [Options]

Options:
  -h|--help              Display this usage message
  --refresh-host-provisioning-conda-env [yes|no]
                         If the host-provisioning Conda environment already
                         exists, update it from its configuration file
                         (default: yes)
  --refresh-jugglebot-conda-env [yes|no]
                         If the jugglebot Conda environment already exists,
                         update it from its configuration file (default: 
                         yes)

'
}

task() {
  local task_desc="$1"
  echo -e "\nTASK [${task_desc}] ********"
}


task 'Parse the arguments'

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      print_usage
      exit 0
      ;;
    --refresh-host-provisioning-conda-env)
      REFRESH_HOST_PROVISIONING_ENV_ENABLED="$2" # yes|no
      shift
      shift
      ;;
    --refresh-jugglebot-conda-env)
      REFRESH_JUGGLEBOT_ENV_ENABLED="$2" # yes|no
      shift
      shift
      ;;
    -*|--*)
      echo "[ERROR]: Unknown option $1" >&2
      print_usage
      exit 2
      ;;
    *)
      POSITIONAL_ARGS+=("$1")
      shift
      ;;
  esac
done

task 'Initialize variables'

REFRESH_HOST_PROVISIONING_ENV_ENABLED="${REFRESH_HOST_PROVISIONING_ENV_ENABLED:-yes}"
REFRESH_JUGGLEBOT_ENV_ENABLED="${REFRESH_JUGGLEBOT_ENV_ENABLED:-yes}"
CONDA_FILEPATH="${HOME}/miniforge3/bin/conda"
JUGGLEBOT_REPO_DIR="${JUGGLEBOT_REPO_DIR:-${HOME}/Jugglebot}"
HOST_PROVISIONING_CONDA_ENV_FILEPATH="${HOST_PROVISIONING_CONDA_ENV_FILEPATH:-${JUGGLEBOT_REPO_DIR}/environments/ubuntu-common/host_provisioning_conda_env.yml}"
JUGGLEBOT_CONDA_ENV_FILEPATH="${JUGGLEBOT_CONDA_ENV_FILEPATH:-${JUGGLEBOT_REPO_DIR}/ros_ws/conda_env.yml}"
REFRESH_PLAYBOOK_FILEPATH="${REFRESH_PLAYBOOK_FILEPATH:-${JUGGLEBOT_REPO_DIR}/environments/ubuntu-common/refresh_dependencies_playbook.yml}"

task 'Enable Conda'

eval "$("${CONDA_FILEPATH}" 'shell.bash' 'hook' 2> /dev/null)"

task 'Check whether the host-provisioning Conda environment exists'

if conda info --envs | grep -q '^host-provisioning\s'; then

  if [[ "${REFRESH_HOST_PROVISIONING_ENV_ENABLED}" == 'yes' ]]; then

    task 'Refresh the host-provisioning Conda environment'

    conda env update -f "${HOST_PROVISIONING_CONDA_ENV_FILEPATH}" --prune

  fi

else
  
  task 'Create the host-provisioning Conda environment'
  
  conda env create -f "${HOST_PROVISIONING_CONDA_ENV_FILEPATH}"

fi

task 'Activate the host-provisioning Conda environment'  

conda activate host-provisioning

task 'Run the refresh jugglebot Conda environment playbook'

ANSIBLE_LOCALHOST_WARNING=False \
  ANSIBLE_INVENTORY_UNPARSED_WARNING=False \
  ansible-playbook "${REFRESH_PLAYBOOK_FILEPATH}" \
    -e "refresh_jugglebot_conda_env_enabled='${REFRESH_JUGGLEBOT_ENV_ENABLED}'" \
  || rc="$?"

# failed_when: the return code is nonzero

if [[ $rc -ne 0 ]]; then
  echo -e "[ERROR]: The Ansible playbook failed with return code ${rc}." >&2
  exit $rc
fi

