" TASK [Set basic appearance and behavior]

syntax on
set background=dark
set laststatus=2     " Always display status bar
"set hlsearch        " Turns on highlighting for search matches
                     " (use :noh inside vim to turn off highlights
                     " after a search)
set tabstop=2        " Sets the tab size to 2
set expandtab        " Tab key inserts spaces instead of tabs
set shiftwidth=2     " Sets spaces used for (auto)indent
set shiftround       " Indent to nearest tabstop
set autoindent       " Carries over previous indent to the next line
set encoding=utf-8   " Change default encoding from Latin-1 to UTF-8
set backup           " Enable backup
set backupdir=~/.vim/backup,.,/tmp
                     " Don't clutter the filesystem with backup files
set directory=~/.vim/swap,.,/tmp
                     " Don't clutter the filesystem with swap files
set undodir=~/.vim/undo
set title            " Try to set the terminal window title
set scrolloff=3      " Keep 3 lines visible above and below the cursor
set cursorline       " Highlight the current line

hi CursorLine term=bold cterm=none ctermbg=233 guibg=Grey40

" TASK [Save and restore buffer state and cursor location]
"
" Tell vim to remember certain things when we exit
"   '10  :  marks will be remembered for up to 10 previously edited files
"   "100 :  will save up to 100 lines for each register
"   :20  :  up to 20 lines of command-line history will be remembered
"   %    :  saves and restores the buffer list
"   n... :  where to save the viminfo files

set viminfo='10,\"100,:20,%,n~/.vim/viminfo

" TASK [Restore the cursor position except in git buffers]
" 
" ref: https://vimhelp.org/usr_05.txt.html#last-position-jump

augroup RestoreCursor
  autocmd!
  autocmd BufReadPost *
    \ let line = line("'\"")
    \ | if line >= 1 && line <= line("$") && &filetype !~# 'commit'
    \      && index(['xxd', 'gitrebase'], &filetype) == -1
    \ |   execute "normal! g`\""
    \ | endif
augroup END

" TASK [Enable Ctrl+s to write the buffer]
"
" Note: This requires reclaiming Ctrl+s from the terminal via `stty -ixon` in ~/.zshrc

noremap <silent> <C-S>   :update<CR>
vnoremap <silent> <C-S>  <C-C>:update<CR>
inoremap <silent> <C-S>  <C-O>:update<CR>

" TASK [Apply indentation rules and plugins by filetype]

filetype plugin indent on

" TASK [Apply settings that are recommended in the Ubuntu default vimrc]

set showcmd      " Show (partial) command in status line.
set showmatch    " Show matching brackets.
set ignorecase   " Do case insensitive matching
set smartcase    " Do smart case matching
set incsearch    " Used for incremental searching
                 " (useful when searching large text files)
" set autowrite  " Automatically save before commands like :next and :make
set hidden       " Don't prompt to save upon changing the active buffer
" set mouse=a    " Enable mouse usage (all modes)

" TASK [Enable wrap for markdown files]

autocmd FileType markdown setlocal wrap linebreak nolist textwidth=80 formatoptions+=t

" TASK [Signify the editor mode using the cursor shape]

if &term =~? 'rxvt' || &term =~? 'xterm' || &term =~? 'st-'
    " 1 or 0 -> blinking block
    " 2 -> solid block
    " 3 -> blinking underscore
    " 4 -> solid underscore
    " Recent versions of xterm (282 or above) also support
    " 5 -> blinking vertical bar
    " 6 -> solid vertical bar
    " Insert Mode
    let &t_SI .= "\<Esc>[6 q"
    " Normal Mode
    let &t_EI .= "\<Esc>[2 q"
endif

" TASK [Enable the vim-plug plugins]

call plug#begin('~/.vim/plugged')

" TASK [Enable the vim-commentary plugin to provide the 'gc' command]

Plug 'tpope/vim-commentary'

" TASK [Retain some popular example plugins]
"
" The vim-sensible plugin aims to provide sensible vim defaults similar to
" this file. However, we don't use it because a collaborator may not want vim
" to automatically reload a buffer when its file changes on disk.
"
" The Fuzzy Finder plugin is super popular, but it isn't necessary for typical
" system administration tasks.
"
" Plug 'tpope/vim-sensible'
" Plug 'junegunn/fzf', { 'do': { -> fzf#setup() } }

call plug#end()

