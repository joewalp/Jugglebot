---
# parameters:
# - environments_dir
# - config
# - upgrade_packages_enabled
- name: Load variables
  include_vars: "{{ environments_dir }}/ubuntu-common/dev_env_vars.yml"

- name: Ensure that the ~/.jugglebot/host_setup/diffs directory exists
  file:
    path: "{{ host_setup_diffs_dir }}"
    state: directory
    recurse: yes

- name: Ensure that the ~/.jugglebot/host_setup/backups directory exists
  file:
    path: "{{ host_setup_backups_dir }}"
    state: directory
    recurse: yes

- name: Ensure that the ~/.jugglebot/host_setup/defaults directory exists
  file:
    path: "{{ host_setup_defaults_dir }}"
    state: directory
    recurse: yes

- name: Ensure that the ~/bin directory exists
  file:
    path: "{{ home_dir }}/bin"
    state: directory

- name: Read the packages upgraded timestamp
  slurp:
    src: "{{ host_setup_dir }}/packages_upgraded_timestamp"
  register: packages_upgraded_read_result
  when: ( host_setup_dir ~ '/packages_upgraded_timestamp' ) is file

- name: Set the packages upgraded timestamp
  set_fact:
    packages_upgraded_timestamp: >
      {{ (packages_upgraded_read_result.content|int) if
      ( ( host_setup_dir ~ '/packages_upgraded_timestamp') is file ) else 0 }}

- name: Determine whether the packages are more than a week stale
  set_fact:
    packages_stale: >
      {{ ( now(utc=True, fmt='%s')|int - packages_upgraded_timestamp|int ) >
      ( 60 * 60 * 24 * 7 ) }}

- name: Prompt to abort if package upgrade isn't enabled and packages are stale
  pause:
    prompt: >
      \nTo perform safe package upgrades, run this playbook with
      `-e 'upgrade_packages_enabled__=yes'`.\n\nDo you want to continue
      without upgrading packages? (yes/no)
  register: continue_without_upgrades_result
  delegate_to: localhost
  when: not upgrade_packages_enabled and packages_stale

- name: Interpret the response to the offer to abort
  set_fact:
    packages_stale_abort: >
      not continue_without_upgrades_result.user_input | bool
  when: not upgrade_packages_enabled and packages_stale

- name: Abort if requested
  fail:
    msg: "[Warning]: Aborting as requested"
  when: not upgrade_packages_enabled and packages_stale and packages_stale_abort

- name: Run apt commands update, upgrade and autoremove .. please be patient
  apt:
    update-cache: yes
    upgrade: safe
    autoremove: yes
  become: yes
  register: upgrade_packages_result
  when: upgrade_packages_enabled

- name: Write the packages upgraded timestamp
  copy:
    content: "{{ now(utc=True, fmt='%s') }}"
    dest: "{{ host_setup_dir ~ '/packages_upgraded_timestamp' }}"
  when: upgrade_packages_enabled and upgrade_packages_result is succeeded

- name: Ensure that essential applications are installed .. please be patient
  package:
    name:
    - git
    - gnome-terminal
    - jq
      # required_by: yq
    - keychain
    - terminator
    - tmux
      # required_by: tmuxp
      #
      # Note: H. Low may not have a use for tmux and tmuxp. J. Walp is
      # including them because tmux will be highly useful if we enable remote
      # access to Prod over ssh.
    - zsh
    state: "{{ 'latest' if upgrade_packages_enabled else 'present' }}"
  become: yes

- name: Ensure that yq is installed
  import_tasks: "{{ environments_dir }}/ubuntu-common/install_yq_tasks.yml"
  vars:
    yq_download_url: "https://github.com/mikefarah/yq/releases/download/v4.44.5/"
  when: not '/usr/bin/yq' is file

- name: Read the zsh path
  command:
    cmd: which zsh
  register: zsh_filepath_result
  changed_when: False

- name: Set the user's shell to zsh
  user:
    name: "{{ username }}"
    shell: "{{ zsh_filepath_result.stdout }}"
  become: yes

- name: Clone the Oh My Zsh repo
  git:
    repo: "{{ ohmyzsh_git_repo_url }}"
    dest: "{{ home_dir }}/.oh-my-zsh"
    version: master
    update: "{{ upgrade_packages_enabled }}"
    depth: 1
    accept_hostkey: yes
  register: ohmyzsh_update_result

- name: Write the Oh My Zsh upgraded timestamp
  copy:
    content: "{{ now(utc=True, fmt='%s') }}"
    dest: "{{ host_setup_dir }}/ohmyzsh_upgraded_timestamp"
  when: ohmyzsh_update_result is changed or upgrade_packages_enabled

- name: Warn if Oh My Zsh wasn't upgraded
  assert:
    that: True
    success_msg: >
      [WARNING]: Oh My Zsh was not upgraded. To upgrade, run this playbook
      with `-e 'upgrade_packages_enabled__=yes'`.
  when: not upgrade_packages_enabled

- name: Render the zsh runtime config file
  template:
    src: "{{ environments_dir }}/ubuntu-common/zshrc.j2"
    dest: "{{ host_setup_defaults_dir }}/zshrc"

- name: Install ~/.zshrc
  import_tasks: "{{ environments_dir }}/ansible-common/copy_or_diff.yml"
  vars:
    src: "{{ host_setup_defaults_dir }}/zshrc"
    remote_src: no
    dest: "{{ home_dir }}/.zshrc"
    readable_dest: ~/.zshrc
    mode: 0644

- name: Ensure that the ~/.vim/backup directory exists
  file:
    path: "{{ home_dir }}/.vim/backup"
    state: directory
    recurse: yes

- name: Ensure that the ~/.vim/swap directory exists
  file:
    path: "{{ home_dir }}/.vim/swap"
    state: directory

- name: Ensure that the ~/.vim/undo directory exists
  file:
    path: "{{ home_dir }}/.vim/undo"
    state: directory

- name: Ensure that the ~/.vim/autoload directory exists
  file:
    path: "{{ home_dir }}/.vim/autoload"
    state: directory

- name: Install the vim-plug plugin manager
  get_url:
    url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    dest: "{{ home_dir }}/.vim/autoload/plug.vim"
    mode: 0644
  when: not ( home_dir ~ '/.vim/autoload/plug.vim' ) is file

- name: Install ~/.vimrc
  import_tasks: "{{ environments_dir }}/ansible-common/copy_or_diff.yml"
  vars:
    src: "{{ environments_dir }}/ubuntu-common/vimrc"
    remote_src: no
    dest: "{{ home_dir }}/.vimrc"
    readable_dest: ~/.vimrc
    mode: 0644

- name: Execute PlugInstall to install the configured vim-plug plugins
  shell:
    cmd: vim -c PlugInstall -c qall

- name: Install ~/.oh-my-zsh/custom/aliases.zsh
  import_tasks: "{{ environments_dir }}/ansible-common/copy_or_diff.yml"
  vars:
    src: "{{ environments_dir }}/ubuntu-common/aliases.zsh"
    remote_src: no
    dest: "{{ home_dir }}/.oh-my-zsh/custom/aliases.zsh"
    readable_dest: ~/.oh-my-zsh/custom/aliases.zsh
    mode: 0644

- name: Disable the sudo welcome message
  file:
    path: "{{ home_dir }}/.sudo_as_admin_successful"
    state: touch
  when: not ( home_dir ~ '/.sudo_as_admin_successful' ) is file

- name: Install ~/.tmux.conf
  import_tasks: "{{ environments_dir }}/ansible-common/copy_or_diff.yml"
  vars:
    src: "{{ environments_dir }}/ubuntu-common/tmux.conf"
    remote_src: no
    dest: "{{ home_dir }}/.tmux.conf"
    readable_dest: ~/.tmux.conf
    mode: 0644

- name: Add the ROS2 package repository
  import_tasks: "{{ environments_dir }}/ansible-common/add_apt_repository.yml"
  vars:
    url: "{{ ros2_package_repo_url }}"
    suite: "{{ ros2_package_repo_suite }}"
    key_url: "{{ ros2_package_repo_key_url }}"
    key_filepath: "{{ ros2_package_repo_key_filepath }}"
    readable_name: ROS2
    update_cache: no

- name: Add the Docker package repository
  import_tasks: "{{ environments_dir }}/ansible-common/add_apt_repository.yml"
  vars:
    url: "{{ docker_package_repo_url }}"
    suite: "{{ docker_package_repo_suite }}"
    key_url: "{{ docker_package_repo_key_url }}"
    key_filepath: "{{ docker_package_repo_key_filepath }}"
    readable_name: Docker
    update_cache: yes

- name: Install ~/bin/install-savvycan
  import_tasks: "{{ environments_dir }}/ansible-common/copy_or_diff.yml"
  vars:
    src: "{{ environments_dir }}/ubuntu-common/install-savvycan"
    remote_src: no
    dest: "{{ home_dir }}/bin/install-savvycan"
    readable_dest: ~/bin/install-savvycan
    mode: 0755

