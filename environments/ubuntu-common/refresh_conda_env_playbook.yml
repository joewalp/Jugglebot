---
- name: Refresh the jugglebot Conda environment
  hosts: localhost
  connection: local
  vars:
    environments_dir: "{{ playbook_dir }}/.."
    repo_dir: "{{ playbook_dir }}/../.."
    ubuntu_codename: "{{ ansible_facts['distribution_release'] }}"
    home_dir: "{{ ansible_facts['env']['HOME'] }}"
    jugglebot_config_dir: "{{ home_dir }}/.jugglebot"
    host_setup_backups_dir: "{{ home_dir }}/.jugglebot/host_setup/backups"
    host_setup_defaults_dir: "{{ home_dir }}/.jugglebot/host_setup/defaults"
    host_setup_diffs_dir: "{{ home_dir }}/.jugglebot/host_setup/diffs"
    conda_base_updated_filepath: "{{ home_dir }}/.jugglebot/host_setup/conda_base_updated_timestamp"
    conda_filepath: "{{ home_dir }}/miniforge3/bin/conda"

  tasks:

  - name: Ensure that the host setup backups directory exists
    file:
      path: "{{ host_setup_backups_dir }}"
      state: directory

  - name: Ensure that the host setup defaults directory exists
    file:
      path: "{{ host_setup_defaults_dir }}"
      state: directory

  - name: Ensure that the host setup diffs directory exists
    file:
      path: "{{ host_setup_diffs_dir }}"
      state: directory

  - name: Ensure that the ~/bin directory exists
    file:
      path: "{{ home_dir }}/bin"
      state: directory

  - name: Initialize the bash runtime config for conda
    # Note: We don't use Bash for development, but we still want that shell to
    # be usable for exploration by a potential contributor who may not be
    # familiar with Z Shell.
    shell: 
      cmd: conda init bash

  - name: Set the conda_base_update_needed variable
    set_fact:
      conda_base_update_needed: "{{ not conda_base_updated_filepath is file }}"

  - name: Update Conda base if necessary
    shell:
      cmd: conda update -y -n base -c conda-forge conda
    when: conda_base_update_needed
    register: update_conda_base_result
    failed_when: update_conda_base_result.rc != 0

  - name: Set the conda base updated timestamp
    copy:
      content: "{{ now(utc=True, fmt='%s') }}"
      dest: "{{ conda_base_updated_filepath }}"
    when: conda_base_update_needed and not update_conda_base_result is failed

  - name: Disable shell prompt modification by Conda
    shell:
      cmd: conda config --set changeps1 False

  - name: Import package version lookup dicts
    include_vars: "{{ environments_dir }}/ubuntu-common/package_version_lookup_vars.yml"

  - name: Set the ros_codename variable and the python_version variable
    set_fact:
      ros_codename: "{{ ubuntu_codename_to_ros_codename[ubuntu_codename] }}"
      python_version: "{{ ubuntu_codename_to_python_version[ubuntu_codename] }}"

  - name: Render the Jugglebot runtime config file with the ROS codename
    template:
      src: "{{ environments_dir }}/ubuntu-common/jugglebot_rc.yml.j2"
      dest: "{{ host_setup_defaults_dir }}/jugglebot_rc.yml"

  - name: Install the Jugglebot runtime config file
    import_tasks: "{{ environments_dir }}/ansible-common/copy_or_diff.yml"
    vars:
      src: "{{ host_setup_defaults_dir }}/jugglebot_rc.yml"
      remote_src: yes
      dest: "{{ jugglebot_config_dir }}/jugglebot_rc.yml"
      readable_dest: ~/.jugglebot/jugglebot_rc.yml
      mode: '0644'

  - name: Render the jugglebot Conda env config with the Python version
    template:
      src: "{{ repo_dir }}/ros_ws/conda_env.yml.j2"
      dest: "{{ repo_dir }}/ros_ws/conda_env.yml"

  - name: Check whether the jugglebot Conda environment exists
    shell:
      cmd: conda info --envs | grep -q '^jugglebot\s'
    register: conda_info_grep_result
    failed_when: conda_info_grep_result.rc not in [0, 1]
    changed_when: False
  
  - name: Set the jugglebot_env_exists variable
    set_fact:
      jugglebot_env_exists: "{{ conda_info_grep_result.rc == 0 }}"

  - name: Create the jugglebot Conda environment .. please be patient
    command:
      cmd: "conda env create -f '{{ repo_dir }}/ros_ws/conda_env.yml'"
    when: not jugglebot_env_exists
  
  - name: Create a file for the jugglebot Conda environment backup
    tempfile:
      path: "{{ host_setup_backups_dir }}"
      prefix: "conda_env.{{ now( fmt='%Y-%m-%dT%H-%M-%S%z' ) }}_"
      suffix: ".yml"
    register: backup_tempfile_result
    when: jugglebot_env_exists

  - name: Export a backup of the jugglebot Conda environment
    shell:
      cmd: "conda env export -n jugglebot --from-history > '{{ backup_tempfile_result.path }}'"
    when: jugglebot_env_exists

  - name: Refresh the jugglebot Conda environment .. please be patient
    shell:
      cmd: "conda env update -n jugglebot -f '{{ repo_dir }}/ros_ws/conda_env.yml' --prune"
    when: jugglebot_env_exists and refresh_jugglebot_conda_env_enabled is truthy(convert_bool=True)

  - name: Install ~/.jugglebot/conda_env.sh
    import_tasks: "{{ environments_dir }}/ansible-common/copy_or_diff.yml"
    vars:
      src: "{{ environments_dir }}/ubuntu-common/conda_env.sh"
      remote_src: no
      dest: "{{ jugglebot_config_dir }}/conda_env.sh"
      readable_dest: ~/.jugglebot/conda_env.sh
      mode: '0644'

  - name: Install the Conda environment activate script
    copy:
      src: 'conda_env_activate.sh'
      dest: '{{ home_dir }}/miniforge3/envs/jugglebot/etc/conda/activate.d/'

  - name: Install the Conda environment deactivate script
    copy:
      src: 'conda_env_deactivate.sh'
      dest: '{{ home_dir }}/miniforge3/envs/jugglebot/etc/conda/deactivate.d/'

  - name: Install ~/bin/refresh-conda-env
    import_tasks: "{{ environments_dir }}/ansible-common/copy_or_diff.yml"
    vars:
      src: "{{ environments_dir }}/ubuntu-common/refresh-conda-env"
      remote_src: no
      dest: "{{ home_dir }}/bin/refresh-conda-env"
      readable_dest: ~/bin/refresh-conda-env
      mode: '0755'

  - name: Verify that the jugglebot Conda environment can be activated
    shell:
      cmd: "export ROS_WORKAROUND_ENABLED=yes \
        && eval \"$('{{ conda_filepath }}' 'shell.bash' 'hook' 2> /dev/null)\" \
        && conda activate jugglebot"
      executable: /usr/bin/bash
    changed_when: False

