#!/usr/bin/env bash
set -o nounset -o pipefail -o errexit
IFS=$'\t\n' # For predictability
rc=0

# TASK [Define functions]

print_usage() {
  echo '
usage: denv COMMAND [Options]

Commands:
  build       Build the container
  exec        Open a shell in the container
  help        Display this usage message
  start       Start the container
  stop        Stop the container

Global Options:
  -h|--help              Display this usage message

Build Command Options:
  --arch [native|arm64]  The platform architecture for the container
                         (default: native)

Exec Command Options:
  --arch [native|arm64]  The platform architecture of the container
                         (default: native)

Start Command Options:
  --arch [native|arm64]  The platform architecture of the container
                         (default: native)

Stop Command Options:
  --arch [native|arm64]  The platform architecture of the container
                         (default: native)

'
}

does_docker_container_exist() {
  local container_name="$1"
  [[ "$(docker container ls --quiet --all --filter "name=${container_name}")" != '' ]]
}

is_docker_container_running() {
  local container_name="$1"
  [[ "$(docker container ls --quiet --filter "name=${container_name}")" != '' ]]
}

is_home_dir_initialized() {
  local container_name="$1"
  docker exec -it \
    "${container_name}" \
    /usr/bin/bash -c '[[ -f "${HOME}/.user-dir-initialized" ]]'
}

get_ssh_identity_count() {
  echo "$(ssh-add -l | grep --invert-match 'The agent has no identities.' | wc -l)"
}

do_build() {
  local container_name="$1"
  local base_image_architecture="$2"

  if [[ ! " native arm64 " =~ " ${base_image_architecture} " ]]; then
    echo "[ERROR]: Unsupported target architecture $base_image_architecture" >&2
    print_usage
    exit 2
  fi

  local ssh_identity_filepath="$( yq -r .denv.identity_filepath \
    "${JUGGLEBOT_CONFIG_DIR}/config.yml" )"

  # Note: The following setup.sh script has several features that support
  # development of the container. We do not expose those features in this script
  # because this script is geared toward using the current release of the
  # container.

  "${JUGGLEBOT_REPO_DIR}/environments/ubuntu-docker/setup.sh" \
    --arch "${base_image_architecture}" \
    --x-git-branch dev-env-provisioning \
    --container-name "${container_name}" \
    -i "${ssh_identity_filepath}" || rc=$?

  if [[ "$rc" != 0 ]]; then
    echo "[ERROR]: The build script failed with error code $rc" >&2
    exit $rc
  fi
}

do_start() {
  local container_name="$1"

  # TASK [Ensure that the docker container exists]

  if ! does_docker_container_exist "${container_name}"; then
    echo -e "
[ERROR]: The ${container_name} docker container does not exist. Run the following command to build it:

  denv build
" >&2
    exit ${EX_UNAVAILABLE}
  fi

  # TASK [Start the container if necessary]

  if ! is_docker_container_running "${container_name}"; then
    docker container start "${container_name}" >/dev/null
  fi

  # TASK [Wait for the home directory to be initialized by entrypoint.sh]

  while ! is_home_dir_initialized "${container_name}"; do
    echo "Waiting for the home directory in container ${container_name} to be initialized..."
    sleep 2
  done
}

do_stop() {
  local container_name="$1"

  if is_docker_container_running "${container_name}"; then
    docker container stop "${container_name}" >/dev/null
  else
    echo "[WARNING]: Docker container ${container_name} was not running" >&2
  fi
}

do_exec() {
  local container_name="$1"

  # TASK [Ensure that the container is running]

  do_start "${container_name}"

  # TASK [Ensure that the configured identity has been added]

  if [[ -f "${JUGGLEBOT_CONFIG_FILEPATH}" ]]; then

    local ssh_identity_filepath="$( yq -r .denv.identity_filepath \
      "${JUGGLEBOT_CONFIG_FILEPATH}" )"

    # TASK [Check whether the ssh-agent contains the configured identity]

    if [[ -f "${ssh_identity_filepath}" && -f "${ssh_identity_filepath}.pub" ]]; then

      if ! ssh-add -T "${ssh_identity_filepath}.pub" >/dev/null 2>&1; then

        # TASK [Add the configured identity to the ssh-agent]

        # Note: This will prompt for a passphrase if the key requires one.

        ssh-add "${ssh_identity_filepath}"
      fi
    else
      echo '[WARNING]: The configured ssh keypair does not exist.' >&2
    fi
  else
    echo '[WARNING]: No ssh key has been configured.' >&2
  fi

  # TASK [Run an interactive shell in the container]
  #
  # Note: The SSH_AUTH_SOCK is typically located beneath /tmp, and the container
  # already has /tmp mounted.

  docker exec -it \
    -e "SSH_AUTH_SOCK=${SSH_AUTH_SOCK:-}" \
    "${container_name}" \
    '/usr/bin/zsh'
}

# TASK [Parse the arguments]

POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      print_usage
      exit 0
      ;;
    -c|--container-name)
      CONTAINER_NAME="$2"
      shift
      shift
      ;;
    --arch)
      BASE_IMAGE_ARCHITECTURE="$2"
      shift;
      shift;
      ;;
    -*|--*)
      echo "[ERROR]: Unknown option $1" >&2
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1")
      shift
      ;;
  esac
done

# TASK [Initialize variables]

BASE_IMAGE_ARCHITECTURE="${BASE_IMAGE_ARCHITECTURE:-native}"
CONTAINER_NAME="${CONTAINER_NAME:-jugglebot-${BASE_IMAGE_ARCHITECTURE}-dev}"
JUGGLEBOT_REPO_DIR="${JUGGLEBOT_REPO_DIR:-${HOME}/Jugglebot}"
JUGGLEBOT_CONFIG_DIR="${JUGGLEBOT_CONFIG_DIR:-${HOME}/.jugglebot}"
JUGGLEBOT_CONFIG_FILEPATH="${JUGGLEBOT_CONFIG_DIR}/config.yml"
EX_UNAVAILABLE=69

if [[ "${#POSITIONAL_ARGS[@]}" != 1 ]]; then
  echo -e "\n[ERROR]: Found ${#POSITIONAL_ARGS[@]} commands when 1 is expected" >&2
  print_usage
  exit 2
fi

case "${POSITIONAL_ARGS[0]}" in
  build)
    do_build "${CONTAINER_NAME}" "${BASE_IMAGE_ARCHITECTURE}"
    ;;
  exec)
    do_exec "${CONTAINER_NAME}"
    ;;
  help)
    print_usage
    ;;
  start)
    do_start "${CONTAINER_NAME}"
    ;;
  stop)
    do_stop "${CONTAINER_NAME}"
    ;;
  *)
    echo '[ERROR]: Unrecognized command' >&2
    print_usage
    exit 2
    ;;
esac

