#!/usr/bin/env bash
set -o nounset -o pipefail -o errexit
IFS=$'\t\n' # Stricter IFS settings
rc=0

# TASK [Parse the arguments]

while [[ $# -gt 0 ]]; do
  case $1 in
    -c|--container-name)
      CONTAINER_NAME="$2"
      shift
      shift
      ;;
    -*|--*)
      echo "[ERROR]: Unknown option $1"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1")
      shift
      ;;
  esac
done

# TASK [Initialize variables]

CONTAINER_NAME="${CONTAINER_NAME:-jugglebot-native-dev}"
EX_UNAVAILABLE=69

# TASK [Define functions]

does_docker_container_exist() {
  local container_name="$1"
  [[ "$(docker container ls --quiet --all --filter "name=${container_name}")" != '' ]]
}

is_docker_container_running() {
  local container_name="$1"
  [[ "$(docker container ls --quiet --filter "name=${container_name}")" != '' ]]
}

is_home_dir_initialized() {
  local container_name="$1"
  docker exec -it \
    "${container_name}" \
    /usr/bin/bash -c '[[ -f "${HOME}/.user-dir-initialized" ]]'
}

# TASK [Ensure that the docker container exists]

if ! does_docker_container_exist "${CONTAINER_NAME}"; then
  echo -e "
[ERROR]: The ${CONTAINER_NAME} docker container does not exist. See the
environments/README.md in the Jugglebot git repository for guidance.\n"
  exit ${EX_UNAVAILABLE}
fi

# TASK [Start the container if necessary]

if ! is_docker_container_running "${CONTAINER_NAME}"; then
  docker container start "${CONTAINER_NAME}"
fi

# TASK [Wait for the home directory to be initialized by entrypoint.sh]

while ! is_home_dir_initialized "${CONTAINER_NAME}"; do
  echo "Waiting for the home directory in container ${CONTAINER_NAME} to be initialized..."
  sleep 2
done

