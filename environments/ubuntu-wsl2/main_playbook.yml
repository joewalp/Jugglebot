---
- name: Provision the WSL2 host
  hosts: localhost
  connection: local
  vars:
    # git_email
    # git_name
    # clone_repo_enabled__
    # editor
    # upgrade_mode_enabled__
    # upgrade_packages_enabled__
    # ssh_identity_filepath
    environments_dir: "{{ playbook_dir }}/.."
    home_dir: "{{ ansible_facts['env']['HOME'] }}"
    ubuntu_codename: "{{ ansible_facts['distribution_release'] }}"
    upgrade_packages_enabled: "{{ upgrade_packages_enabled__ | bool }}"
    upgrade_mode_enabled: "{{ upgrade_mode_enabled__ | bool }}"
    clone_repo_enabled: "{{ clone_repo_enabled__ | bool }}"
    jugglebot_repo_dir: "{{ home_dir }}/Jugglebot"
    juggelbot_config_dir: "{{ home_dir }}/.jugglebot"
    host_setup_defaults_dir: "{{ home_dir }}/.jugglebot/host_setup/defaults"
    wsl_welcome_flag_filepath: "{{ home_dir }}/.hushlogin"
    jugglebot_repo_ssh_url: 'git@github.com:joewalp/Jugglebot.git'

  tasks:

  - name: Ensure that the ssh_identity_filepath was specified
    assert:
      that: ssh_identity_filepath
      quiet: yes
      fail_msg: 'When upgrade mode is not enabled, this playbook requires that the ssh identity file be specified using `-e "ssh_identity_filepath=''[identity file]''"`.'
    when: not upgrade_mode_enabled

  - name: Ensure that the specified ssh keypair exists
    assert:
      that: "ssh_identity_filepath is file and (ssh_identity_filepath ~ '.pub') is file"
      quiet: yes
      fail_msg: "The specified ssh keypair ('{{ ssh_identity_filepath }}', '{{ ssh_identity_filepath }}.pub') was not found."
    when: not upgrade_mode_enabled

  - name: Ensure that the git_name was specified
    assert:
      that: git_name
      quiet: yes
      fail_msg: 'When upgrade mode is not enabled, this playbook requires that the git name be specified using `-e "git_name=''[your full name]''"`.'
    when: not upgrade_mode_enabled

  - name: Ensure that the git_email was specified
    assert:
      that: git_email
      quiet: yes
      fail_msg: 'When upgrade mode is not enabled, this playbook requires that the git name be specified using `-e "git_email=''[your email address]''"`.'
    when: not upgrade_mode_enabled

  - name: Check whether the specifed editor exists
    shell:
      cmd: "which {{ editor }}"
    register: which_editor_result
    when: editor

  - name: Assert that the specified editor exists
    assert:
      that: which_editor_result.rc == 0
      quiet: yes
      fail_msg: "The specified editor {{ editor }} is not installed."
    when: editor

  - name: Ensure that the Jugglebot repo has been cloned
    git:
      repo: "{{ jugglebot_repo_ssh_url }}"
      dest: "{{ jugglebot_repo_dir }}"
    when: clone_repo_enabled

  - name: Import the package version lookup dicts
    include_vars: "{{ environments_dir }}/ubuntu-common/package_version_lookup_vars.yml"

  - name: Read the config defaults file
    slurp:
      src: "{{ environments_dir }}/ubuntu-common/config_defaults.yml"
    register: config_defaults_read_result

  - name: Set the default_config variable
    set_fact:
      default_config: "{{ config_defaults_read_result.content | b64decode | from_yaml }}"

  - name: Set the ros_config variable
    set_fact:
      ros_config:
        ros:
          version_codename: "{{ ubuntu_codename_to_ros_codename[ubuntu_codename] }}"

  - name: Set default config variables
    set_fact:
      editor_config: "{{ {} }}"
      git_name_config: "{{ {} }}"
      git_email_config: "{{ {} }}"
      ssh_identity_config: "{{ {} }}"
      current_config: "{{ {} }}"

  - name: Set the editor_config variable
    set_fact:
      editor_config:
        zsh:
          editor: editor
        git:
          core:
            editor: editor
    when: editor

  - name: Set the git_name_config variable
    set_fact:
      git_name_config:
        git:
          user:
            name: "{{ git_name }}"
    when: git_name

  - name: Set the git_name_config variable
    set_fact:
      git_email_config:
        git:
          user:
            email: "{{ git_email }}"
    when: git_email

  - name: Set the ssh_identity_config variable
    set_fact:
      ssh_identity_config:
        denv:
          identity_filepath: "{{ ssh_identity_filepath }}"
        ssh:
          github_com:
            identity_filepath: "{{ ssh_identity_filepath }}"
          docker_native_env:
            identity_filepath: "{{ ssh_identity_filepath }}"
          docker_arm64_env:
            identity_filepath: "{{ ssh_identity_filepath }}"
    when: ssh_identity_filepath

  - name: Read the current config file
    slurp:
      src: "{{ jugglebot_config_dir }}/config.yml"
    register: current_config_read_result
    when: (jugglebot_config_dir ~ '/config.yml') is file

  - name: Set the current_config variable
    set_fact:
      current_config: >
        "{{ current_config_read_result.content | b64decode |
        from_yaml if current_config_read_result is defined else {} }}"
    when: (jugglebot_config_dir ~ '/config.yml') is file

  - name: Create the overlayed config
    set_fact:
      config: >
        "{{ default_config
        | combine(ros_config)
        | combine(current_config)
        | combine(editor_config)
        | combine(git_name_config)
        | combine(git_email_config)
        | combine(ssh_identity_config) }}"

  - name: Ensure that the host setup defaults directory exists
    file:
      path: "{{ host_setup_defaults_dir }}"
      state: directory

  - name: Render the Jugglebot config file using the overlayed config
    template:
      src: "{{ environments_dir }}/ubuntu-common/config.yml.j2"
      dest: "{{ host_setup_defaults_dir }}/config.yml"

  - name: Install the Jugglebot config file
    import_tasks: "{{ environments_dir }}/ansible-common/copy_or_diff.yml"
    vars:
      src: "{{ host_setup_defaults_dir }}/config.yml"
      remote_src: yes
      dest: "{{ jugglebot_config_dir }}/config.yml"
      readable_dest: ~/.jugglebot/config.yml
      mode: 0644

  - name: Ensure that WSL uses systemd
    # Note: Systemd is enabled by default, but this will change whitespace
    community.general.ini_file:
      path: '/etc/wsl.conf'
      section: 'boot'
      option: 'systemd'
      value: 'true'
    become: yes

  - name: Disable the WSL welcome message
    file:
      path: "{{ wsl_welcome_flag_filepath }}"
      state: touch
    when: not wsl_welcome_flag_filepath is file

  - name: Provision the Ubuntu environment
    import_tasks: "{{ environments_dir }}/ubuntu-common/dev_env_tasks.yml"
    vars:
      environments_dir: "{{ playbook_dir }}/.."
      # config
      # upgrade_packages_enabled

  - name: Render the ssh config file
    template:
      src: "{{ environments_dir }}/ubuntu-wsl2/ssh_config.j2"
      dest: "{{ host_setup_defaults_dir }}/ssh_config"

  - name: Install the ssh config file
    import_tasks: "{{ environments_dir }}/ansible-common/copy_or_diff.yml"
    vars:
      src: "{{ host_setup_defaults_dir }}/ssh_config"
      remote_src: yes
      dest: "{{ home_dir }}/.ssh/config"
      readable_dest: ~/.ssh/config
      mode: 0600

  - name: Render the git config file
    template:
      src: "{{ environments_dir }}/ubuntu-wsl2/git_config.j2"
      dest: "{{ host_setup_defaults_dir }}/git_config"

  - name: Install the git config file
    import_tasks: "{{ environments_dir }}/ansible-common/copy_or_diff.yml"
    vars:
      src: "{{ host_setup_defaults_dir }}/git_config"
      remote_src: yes
      dest: "{{ home_dir }}/.gitconfig"
      readable_dest: ~/.gitconfig
      mode: 0644

  - name: Provision the Docker Engine & Qemu
    import_tasks: "{{ environments_dir }}/ubuntu-common/docker_engine_tasks.yml"
    vars:
      environments_dir: "{{ playbook_dir }}/.."

  - name: Add the user to the docker group
    # Note: This enables the user to issue CLI commands (eg. `docker run [..]`)
    # to the Docker Engine without sudo.
    user:
      name: "{{ ansible_facts['env']['USER'] }}"
      append: yes
      groups: docker
    become: yes

  - name: Install ~/bin/denv
    import_tasks: "{{ environments_dir }}/ansible-common/copy_or_diff.yml"
    vars:
      src: "{{ environments_dir }}/ubuntu-wsl2/denv"
      remote_src: no
      dest: "{{ home_dir }}/bin/denv"
      readable_dest: ~/bin/denv
      mode: 0755

  - name: Set the ros_version_codename variable
    set_fact:
      ros_version_codename: "{{ runtime_config['ros']['version_codename'] }}"

  - name: "Install ROS2 {{ ros_version_codename|capitalize }} Desktop .. please be very patient"
    package:
      name: "{{ ros_codename_to_ros_package_names[ros_version_codename] }}"
      state: present
    become: yes

  - name: Initialize the rosdep package manager
    command:
      cmd: /usr/bin/rosdep init
    when: not '/etc/ros/rosdep/sources.list.d/20-default.list' is file
    become: yes

  - name: Update the rosdep package manager
    command:
      cmd: /usr/bin/rosdep update

  - name: Install the Jugglebot ROS dependencies
    shell:
      cmd: >
        "source /opt/ros/{{ ros_version_codename }}/setup.bash
        && rosdep install -i --from-path src --rosdistro {{ ros_version_codename }}"
      executable: /usr/bin/bash
      chdir: "{{ home_dir }}/Jugglebot/ros_ws"

