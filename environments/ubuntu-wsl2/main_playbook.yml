---
- name: Provision the WSL2 host
  hosts: localhost
  connection: local
  vars:
    environments_dir: "{{ playbook_dir }}/.."

  tasks:

  - name: Ensure that the ssh_keypair_name was specified
    assert:
      that: ssh_keypair_name
      quiet: yes
      fail_msg: 'This playbook requires that the keypair name be specified using `-e "ssh_keypair_name=''[keypair name]''"`'
  
  - name: Ensure that the git_name was specified
    assert:
      that: git_name
      quiet: yes
      fail_msg: 'This playbook requires that the git name be specified using `-e "git_name=''[your full name]''"`'
  
  - name: Ensure that the git_email was specified
    assert:
      that: git_email
      quiet: yes
      fail_msg: 'This playbook requires that the git name be specified using `-e "git_email=''[your email address]''"`'
  
  - name: Load variables
    include_vars: "{{ environments_dir }}/ubuntu-wsl2/main_vars.yml"

  - name: Ensure that wsl uses systemd
    # Note: Systemd is enabled by default, but this will change whitespace
    community.general.ini_file:
      path: '/etc/wsl.conf'
      section: 'boot'
      option: 'systemd'
      value: 'true'
    become: yes

  - name: Prevent wsl from changing resolv.conf
    community.general.ini_file:
      path: '/etc/wsl.conf'
      section: 'network'
      option: 'generateResolvConf'
      value: 'false'
    become: yes

  - name: Specify the Google nameserver in resolv.conf
    lineinfile:
      path: '/etc/resolv.conf'
      regexp: '^nameserver .*$'
      line: 'nameserver 8.8.8.8'
    become: yes

  - name: Disable the WSL welcome message
    file:
      path: "{{ home_dir }}/.hushlogin"
      state: touch

  - name: Provision the Ubuntu environment
    import_tasks: "{{ environments_dir }}/ubuntu-common/dev_env_tasks.yml"
    vars:
      environments_dir: "{{ playbook_dir }}/.."

  - name: Ensure that the specified ssh keypair exists
    assert:
      that: "ssh_private_key_filepath is file and (ssh_private_key_filepath + '.pub') is file"
      quiet: yes
      fail_msg: "The specified ssh keypair ('{{ ssh_private_key_filepath }}', '{{ ssh_private_key_filepath }}.pub') was not found."

  - name: Render the ssh config file
    template:
      src: "{{ environments_dir }}/ubuntu-wsl2/ssh_config.j2"
      dest: "{{ ssh_config_rendered_filepath }}"

  - name: Install the ssh config file
    import_tasks: "{{ environments_dir }}/ansible-common/copy_or_diff.yml"
    vars:
      src: "{{ ssh_config_rendered_filepath }}"
      remote_src: yes
      dest: "{{ home_dir }}/.ssh/config"
      readable_dest: ~/.ssh/config
      mode: '0600'

  - name: Set user name in ~/.gitconfig
    community.general.ini_file:
      path: "{{ gitconfig_filepath }}"
      section: 'user'
      option: 'name'
      value: "{{ git_name }}"

  - name: Set user email in ~/.gitconfig
    community.general.ini_file:
      path: "{{ gitconfig_filepath }}"
      section: 'user'
      option: 'email'
      value: "{{ git_email }}"

  - name: Ensure that the Jugglebot repo has been cloned
    git:
      repo: "{{ jugglebot_repo_ssh_url }}"
      dest: "{{ jugglebot_repo_dir }}"

  - name: Provision the Docker Engine & Qemu
    import_tasks: "{{ environments_dir }}/ubuntu-common/docker_engine_tasks.yml"
    vars:
      environments_dir: "{{ playbook_dir }}/.."

  - name: Add the user to the docker group
    # Note: This enables the user to issue CLI commands (eg. `docker run [..]`)
    # to the Docker Engine without sudo.
    user:
      name: "{{ ansible_facts['env']['USER'] }}"
      append: yes
      groups: docker
    become: yes

  - name: Create or diff the docker-native-env script
    import_tasks: "{{ environments_dir }}/ansible-common/copy_or_diff.yml"
    vars:
      src: "{{ environments_dir }}/ubuntu-wsl2/docker-native-env"
      remote_src: no
      dest: "{{ home_dir }}/bin/docker-native-env"
      readable_dest: ~/bin/docker-native-env
      mode: '0755'

  - name: Read the ROS2 codename
    command:
      cmd: "/usr/bin/yq -r .ros.version_codename '{{ jugglebot_rc_rendered_filepath }}'"
    register: yq_command_result

  - name: Set the ROS2 codename
    set_fact:
      ros_version_codename: "{{ yq_command_result.stdout }}"

  - name: Install python3-argcomplete if necessary
    package:
      name: python3-argcomplete
      state: present
    become: yes
    when: ros_version_codename == 'foxy'

  - name: "Install ROS2 {{ ros_version_codename|capitalize }} Desktop .. please be patient"
    # Note: We install version of ROS2 that has tier 1 support for this LTS
    # version. See the ~/ubuntu-common/jugglebot_rc.yml.j2 for the mapping of
    # LTS version to ROS2 codename.
    package:
      name: 
        - "ros-{{ ros_version_codename }}-desktop"
        - ros-dev-tools
      state: present
    become: yes

